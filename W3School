1. SELECT DISTINCT Country FROM Customers; // The SELECT DISTINCT statement is used to return only distinct (different) values.

2. SELECT COUNT(DISTINCT Country) FROM Customers; // COUNT return the number of 

3. SELECT Count(*) AS DistinctCountries FROM (SELECT DISTINCT Country FROM Customers); // Same code as 2

4. SELECT * FROM Customers WHERE Country='Mexico'; // WHERE is used for filtering

************************************************************************************************
*    Operator	   Description	Example                                                        *
*       =	             Equal	                                                       *
*       >	          Greater than	                                                       * 
*       <	           Less than	                                                               *     
*       >=	    Greater than or equal	                                                         *
*       <=	     Less than or equal	                                                           * 
*       <>	    Not equal. Note: In some versions of SQL this operator may be written as !=	   *
*    BETWEEN	  Between a certain range	                                                       *
*     LIKE	    Search for a pattern	                                                         *
*      IN	      To specify multiple possible values for a column	                             *
************************************************************************************************

5. SELECT * FROM Products ORDER BY Price; // ORDER BY keyword is used to sort the result-set in ascending or descending order. Default is ASC. For string values the ORDER BY keyword will order alphabetically

6. SELECT * FROM Products ORDER BY Price DESC; // Descending order

7. INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country) VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway'); // The INSERT INTO statement is used to insert new records in a table.

8. INSERT INTO Customers (CustomerName, City, Country) VALUES ('Cardinal', 'Stavanger', 'Norway'); // Insert into specified columns

9. UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition; // The UPDATE statement is used to modify the existing records in a table.

9. UPDATE Customers SET ContactName = 'Alfred Schmidt', City= 'Frankfurt' WHERE CustomerID = 1;

10. DELETE FROM table_name WHERE condition; // The DELETE statement is used to delete existing records in a table.

10. DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';

11. DELETE FROM table_name; // Delete all records

12. DROP TABLE table_name; // Delete table

13. SELECT TOP 3 * FROM Customers; // The SELECT TOP clause is used to specify the number of records to return.

13. SELECT * FROM Customers LIMIT 3; // Mysql

14. SELECT MIN(column_name) FROM table_name WHERE condition; // Minimum value of seleted column

14. SELECT MAX(column_name) FROM table_name WHERE condition;

14. SELECT MIN(Price) AS SmallestPrice FROM Products;

15. SELECT SUM(column_name) FROM table_name WHERE condition; // Sum of numeric column

16. Group BY ?????????

17. SELECT AVG(column_name) FROM table_name WHERE condition; // Average of numeric column

There are two wildcards often used in conjunction with the LIKE operator:

 The percent sign % represents zero, one, or multiple characters
 The underscore sign _ represents one, single character

18. SELECT * FROM Customers WHERE city LIKE 'L_nd__';

18. SELECT * FROM Customers WHERE city LIKE '%L%';

18. SELECT * FROM Customers WHERE CustomerName LIKE '%a';

18. SELECT * FROM Customers WHERE CustomerName LIKE 'b%s'; // begin 'b' finish 's'

18. SELECT * FROM Customers WHERE CustomerName LIKE 'a__%'; // Return all customers that starts with "a" and are at least 3 characters in length:

19. SELECT column_name(s) FROM table_name WHERE column_name IN (value1, value2, ...);

19. SELECT * FROM Customers WHERE Country NOT IN ('Germany', 'France', 'UK');

20.SELECT column_name(s) FROM table_name WHERE EXISTS (SELECT column_name FROM table_name WHERE condition); // The EXISTS operator is used to test for the existence of any record in a subquery.

21. 




1. CREATE DATABASE databasename;

2. DROP DATABASE databasename;

3. 
