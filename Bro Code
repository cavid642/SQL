# DATABASES
1. CREATE DATABASE myDB; 
2. USE myDB;
3. DROP DATABASE myDB;
4. ALTER DATABASE myDB READ ONLY = 1;
5. ALTER DATABASE myDB READ ONLY = 0;

-------------------------------------------------

#TABLES
1. CREATE DATABASE myDB; 
2. USE myDB;
3. CREATE TABLE customers(
	  student_id int,
    first_name varchar(50),
    surname varchar(50),
    score int
   );
4. SHOW TABLES;
5. SELECT * FROM customers;
6. RENAME TABLE customers TO students;
7. SHOW TABLES;
8. ALTER TABLE students ADD phone_number VARCHAR(15);
9. SELECT * FROM students;
10. ALTER TABLE students RENAME COLUMN phone_number TO email;
11. ALTER TABLE students MODIFY COLUMN email VARCHAR(100);
12. ALTER TABLE students MODIFY email VARCHAR(100) AFTER surname;
13. ALTER TABLE students MODIFY email VARCHAR(100) FIRST;
14. ALTER TABLE students DROP COLUMN email;

-------------------------------------------------

#INSERT ROWS
1. use mydb;
2. SELECT * FROM students;
3. INSERT INTO students VALUES(1, "Javid", "Maharramli", 90);
4. INSERT INTO students VALUES(2, "Rasul", "Alakbarov", 100), (3, "Tamerlan", "Ibadov", 80), (4, "Telman", "Nurmamadli", 78);
5. INSERT INTO students (student_id, first_name, surname) VALUES (5, "Kanan", "Muzaffarov");

-------------------------------------------------

#SELECT
1. SELECT * FROM students;
2. SELECT first_name, surname FROM students;
3. SELECT * FROM students WHERE student_id = 3;
4. SELECT * FROM students WHERE first_name = "Javid";
5. SELECT * FROM students WHERE score > 80;
6. SELECT * FROM students WHERE student_id != 4;
7. SELECT * FROM students WHERE score IS NULL;
8 .SELECT * FROM students WHERE score IS NOT NULL;

-------------------------------------------------

#UPDATE AND DELETE
1. SELECT * FROM students;
2. UPDATE students SET score = 85 WHERE first_name = "Kanan";
3. INSERT INTO students VALUES(6, "Nicat", "Maharramli", 95);
4. UPDATE students SET first_name = "Ali", surname = "Khudiyev" WHERE student_id = 6;
5. UPDATE students SET score = NULL WHERE first_name = "Ali";
6. DELETE FROM students WHERE student_id = 6;

--------------------------------------------------

#AUTOCOMMIT, COMMIT AND ROLLBACK
1. SET AUTOCOMMIT = OFF;
2. COMMIT;
3. SELECT * FROM students;
4. DELETE FROM students;
5. ROLLBACK;
6. SELECT * FROM students;

--------------------------------------------------

#CURRENT_DATE AND CURRENT_TIME
1. CREATE TABLE test(
	  my_date DATE,
    my_time TIME,
    my_datetime DATETIME
	);
2. INSERT INTO test VALUES(CURRENT_DATE(), CURRENT_TIME(), NOW());
3. INSERT INTO test VALUES(CURRENT_DATE(), NULL, NOW());
4. INSERT INTO test VALUES(CURRENT_DATE() - 1, CURRENT_TIME(), NOW());
5. SELECT * FROM test;

--------------------------------------------------

#UNIQUE
1. USE myDB;
2. CREATE TABLE products(
	product_id INT,
    product_name VARCHAR(25),
    price DECIMAL(4, 2)
   );
3. ALTER TABLE products ADD CONSTRAINT UNIQUE(product_name); // MAKE product_name column UNIQUE
4. INSERT INTO products VALUES (100, "hamburger", 3.99), (101, "fries", 1.89), (102, "soda", 1.00), (103, "ice cream", 1.49), (104, "fries", 1.75); // DUPLICATE ERROR
5. SELECT * FROM products;

---------------------------------------------------

#NOT NULL
1. CREATE TABLE team(
	team_id INT,
    	team_name VARCHAR(25),
    	score DECIMAL(4, 2) NOT NULL //THIS COLUMN MUST BE NOT NULL VALUE
   );
2. INSERT INTO team VALUES(101, "Barselona", NULL); // SCORE CAN NOT BE NULL ERROR
3. INSERT INTO team VALUES(101, "Barselona", 0); // NOT ERROR
4. SELECT * FROM team;

---------------------------------------------------

#CHECK
1. use mydb;
2. SET SQL_SAFE_UPDATES = 0;

3. CREATE TABLE employees(
	employee_id INT,
	first_name VARCHAR(50),
	last_name VARCHAR(50),
	hourly_pay DECIMAL(5, 2),
	hire_date DATE,
	CONSTRAINT chk_hourly_pay CHECK (hourly_pay >= 10.00)
    );
4. INSERT INTO employees VALUES(100, "Anar", "Eyvazzade", 8.9, '2022-12-12'); // ERROR
5. ALTER TABLE employees ADD CONSTRAINT chk_hire_date CHECK (hire_date > '2020-01-01');
6. ALTER TABLE employees DROP CHECK chk_hire_date;

---------------------------------------------------

#DEFAULT
1. SELECT * FROM products;
2. INSERT INTO products VALUES (100, "hamburger", 3.99), (101, "fries", 1.89), (102, "soda", 1.00), (103, "ice cream", 1.49);
3. INSERT INTO products VALUES (104, "straw", 0.00), (105, "napkin", 0.00), (106, "fork", 0.00), (107, "spoon", 0.00);
4. ALTER TABLE products ALTER price SET DEFAULT 0;
5. INSERT INTO products(product_id, product_name) VALUES (108, "cola"), (109, "fanta"), (110, "pepsi"), (111, "sprite");

----------------------------------------------------

#PRIMARY KEY
1. CREATE TABLE transactions(
	transaction_id_1 INT PRIMARY KEY,
   	 amount DECIMAL(5, 2)
    );
2. ALTER TABLE transactions ADD CONSTRAINT PRIMARY KEY(amount);
3. INSERT INTO transactions VALUES(1000, 4.99); 
4. INSERT INTO transactions VALUES(1000, 9.99); // ERROR
5. ALTER TABLE transactions DROP PRIMARY KEY;

-----------------------------------------------------

#AUTO_INCREMENT
1. CREATE TABLE transactions(
	transaction_id_1 INT PRIMARY KEY AUTO_INCREMENT,
    	amount DECIMAL(5, 2)
   );
2. ALTER TABLE transactions AUTO_INCREMENT = 1000;
3. INSERT INTO transactions(amount) VALUES(2.68);
4. INSERT INTO transactions(amount) VALUES(8.67);
5. INSERT INTO transactions(amount) VALUES(1.62);
6. INSERT INTO transactions(amount) VALUES(2.68);
7. SELECT * FROM transactions;

-----------------------------------------------------

#FOREIGN KEYS
1. SET SQL_SAFE_UPDATES = 0;
2. use mydb;
3. CREATE TABLE customers (
	customer_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50),
    last_name VARCHAR(50)
  );
4. INSERT INTO customers (first_name, last_name) VALUES ("Fred", "Fish"), ("Larry", "Lobster"), ("Bubble", "Bass");
5. SELECT * FROM customers;
6. CREATE TABLE transactions(
	transactions_id INT PRIMARY KEY AUTO_INCREMENT,
	amount DECIMAL(5, 2),
    	customer_id INT,
    	FOREIGN KEY(customer_id) REFERENCES customers(customer_id)
   );
7. ALTER TABLE transactions DROP FOREIGN KEY  transactions_ibfk_1;
8. ALTER TABLE transactions ADD CONSTRAINT fk_customer_id FOREIGN KEY(customer_id) REFERENCES customers(customer_id);
